{"ast":null,"code":"import _asyncToGenerator from \"/Users/jonnygold/Code/MVDS/angular/ng-task-gql-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Output, Input, ViewChildren, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\nimport { getViewerDetails, isLocalFile, replaceLocalUrl, getDocxToHtml, googleCheckSubscription, iframeIsLoaded } from 'docviewhelper';\nexport * from 'docviewhelper';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"iframe\"];\n\nfunction NgxDocViewerComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r2.docHtml, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_0_object_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"object\", 4)(1, \"p\");\n    i0.ɵɵtext(2, \" Your browser does not support PDFs. \");\n    i0.ɵɵelementStart(3, \"a\", 5);\n    i0.ɵɵtext(4, \"Download the PDF\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \". \");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"data\", ctx_r3.fullUrl, i0.ɵɵsanitizeResourceUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"href\", ctx_r3.fullUrl, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_0_div_1_Template, 1, 1, \"div\", 1);\n    i0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_0_object_2_Template, 6, 2, \"object\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.configuredViewer !== \"pdf\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.fullUrl && ctx_r0.configuredViewer === \"pdf\");\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_1_iframe_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"iframe\", 8, 9);\n    i0.ɵɵlistener(\"load\", function NgxDocViewerComponent_ng_container_1_iframe_1_Template_iframe_load_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.iframeLoaded());\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"src\", ctx_r4.fullUrl, i0.ɵɵsanitizeResourceUrl);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"iframe\", 12, 9);\n    i0.ɵɵlistener(\"load\", function NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template_iframe_load_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r11.iframeLoaded());\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"src\", ctx_r9.fullUrl, i0.ɵɵsanitizeResourceUrl);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"div\");\n    i0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template, 2, 1, \"iframe\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r5.disableContent === \"popout-hide\" ? \"#fff\" : \"transparent\");\n    i0.ɵɵclassProp(\"overlay-full\", ctx_r5.disableContent === \"all\")(\"overlay-popout-google\", ctx_r5.configuredViewer === \"google\" && (ctx_r5.disableContent === \"popout\" || ctx_r5.disableContent === \"popout-hide\"))(\"overlay-popout-office\", ctx_r5.configuredViewer === \"office\" && (ctx_r5.disableContent === \"popout\" || ctx_r5.disableContent === \"popout-hide\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.fullUrl);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_1_iframe_1_Template, 2, 1, \"iframe\", 6);\n    i0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_1_div_2_Template, 3, 9, \"div\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.fullUrl && ctx_r1.disableContent === \"none\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.disableContent !== \"none\");\n  }\n}\n\nclass NgxDocViewerComponent {\n  constructor(domSanitizer, ngZone) {\n    this.domSanitizer = domSanitizer;\n    this.ngZone = ngZone;\n    this.loaded = new EventEmitter();\n    this.url = '';\n    this.queryParams = '';\n    this.viewerUrl = '';\n    this.googleCheckInterval = 3000;\n    this.googleMaxChecks = 5;\n    this.disableContent = 'none';\n    this.googleCheckContentLoaded = true;\n    this.viewer = 'google';\n    this.overrideLocalhost = '';\n    this.iframes = undefined;\n    this.fullUrl = undefined;\n    this.externalViewer = false;\n    this.docHtml = '';\n    this.configuredViewer = 'google';\n    this.checkIFrameSubscription = undefined;\n    this.shouldCheckIframe = false;\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldCheckIframe) {\n      const iframe = this.iframes?.first?.nativeElement;\n\n      if (iframe) {\n        this.shouldCheckIframe = false;\n        this.reloadIframe(iframe);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkIFrameSubscription) {\n      this.checkIFrameSubscription.unsubscribe();\n    }\n  }\n\n  ngOnChanges(changes) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (changes && changes['viewer'] && (changes['viewer'].isFirstChange || changes['viewer'].currentValue !== changes['viewer'].previousValue)) {\n        if (_this.viewer !== 'google' && _this.viewer !== 'office' && _this.viewer !== 'mammoth' && _this.viewer !== 'pdf' && _this.viewer !== 'url') {\n          console.error(`Unsupported viewer: '${_this.viewer}'. Supported viewers: google, office, mammoth and pdf`);\n        }\n\n        _this.configuredViewer = _this.viewer;\n      }\n\n      if (changes['url'] && changes['url'].currentValue !== changes['url'].previousValue || changes['viewer'] && changes['viewer'].currentValue !== changes['viewer'].previousValue || changes['viewerUrl'] && changes['viewerUrl'].currentValue !== changes['viewerUrl'].previousValue) {\n        let viewerDetails = getViewerDetails(_this.url, _this.configuredViewer, _this.queryParams, _this.viewerUrl);\n        _this.externalViewer = viewerDetails.externalViewer;\n\n        if (viewerDetails.externalViewer && _this.overrideLocalhost && isLocalFile(_this.url)) {\n          const newUrl = replaceLocalUrl(_this.url, _this.overrideLocalhost);\n          viewerDetails = getViewerDetails(newUrl, _this.configuredViewer, _this.queryParams, _this.viewerUrl);\n        }\n\n        _this.docHtml = '';\n\n        if (_this.checkIFrameSubscription) {\n          _this.checkIFrameSubscription.unsubscribe();\n        }\n\n        if (!_this.url) {\n          _this.fullUrl = undefined;\n        } else if (viewerDetails.externalViewer || _this.configuredViewer === 'url' || _this.configuredViewer === 'pdf') {\n          _this.fullUrl = _this.domSanitizer.bypassSecurityTrustResourceUrl(viewerDetails.url); // see:\n          // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives\n          // hack to reload iframe if it's not loaded.\n          // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.\n\n          if (_this.configuredViewer === 'google' && _this.googleCheckContentLoaded) {\n            _this.ngZone.runOutsideAngular(() => {\n              // if it's not loaded after the googleIntervalCheck, then open load again.\n              const iframe = _this.iframes?.first?.nativeElement;\n\n              if (iframe) {\n                _this.reloadIframe(iframe);\n              } else {\n                _this.shouldCheckIframe = true;\n              }\n            });\n          }\n        } else if (_this.configuredViewer === 'mammoth') {\n          _this.docHtml = yield getDocxToHtml(_this.url);\n        }\n      }\n    })();\n  }\n\n  reloadIframe(iframe) {\n    this.checkIFrameSubscription = googleCheckSubscription();\n    this.checkIFrameSubscription.subscribe(iframe, this.googleCheckInterval, this.googleMaxChecks);\n  }\n\n  iframeLoaded() {\n    const iframe = this.iframes?.first?.nativeElement;\n\n    if (iframe && iframeIsLoaded(iframe)) {\n      this.loaded.emit(undefined);\n\n      if (this.checkIFrameSubscription) {\n        this.checkIFrameSubscription.unsubscribe();\n      }\n    }\n  }\n\n}\n\nNgxDocViewerComponent.ɵfac = function NgxDocViewerComponent_Factory(t) {\n  return new (t || NgxDocViewerComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nNgxDocViewerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxDocViewerComponent,\n  selectors: [[\"ngx-doc-viewer\"]],\n  viewQuery: function NgxDocViewerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iframes = _t);\n    }\n  },\n  inputs: {\n    url: \"url\",\n    queryParams: \"queryParams\",\n    viewerUrl: \"viewerUrl\",\n    googleCheckInterval: \"googleCheckInterval\",\n    googleMaxChecks: \"googleMaxChecks\",\n    disableContent: \"disableContent\",\n    googleCheckContentLoaded: \"googleCheckContentLoaded\",\n    viewer: \"viewer\",\n    overrideLocalhost: \"overrideLocalhost\"\n  },\n  outputs: {\n    loaded: \"loaded\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [3, \"innerHtml\", 4, \"ngIf\"], [\"type\", \"application/pdf\", \"width\", \"100%\", \"height\", \"100%\", 3, \"data\", 4, \"ngIf\"], [3, \"innerHtml\"], [\"type\", \"application/pdf\", \"width\", \"100%\", \"height\", \"100%\", 3, \"data\"], [3, \"href\"], [\"id\", \"iframe-doc-viewer\", \"frameBorder\", \"0\", 3, \"src\", \"load\", 4, \"ngIf\"], [\"class\", \"container\", 4, \"ngIf\"], [\"id\", \"iframe-doc-viewer\", \"frameBorder\", \"0\", 3, \"src\", \"load\"], [\"iframe\", \"\"], [1, \"container\"], [\"id\", \"iframe\", \"frameBorder\", \"0\", 3, \"src\", \"load\", 4, \"ngIf\"], [\"id\", \"iframe\", \"frameBorder\", \"0\", 3, \"src\", \"load\"]],\n  template: function NgxDocViewerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgxDocViewerComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_1_Template, 3, 2, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.externalViewer);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.externalViewer);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\"[_nghost-%COMP%]{display:block}.container[_ngcontent-%COMP%]{width:100%;height:100%;position:relative}.overlay-popout-google[_ngcontent-%COMP%]{width:40px;height:40px;right:26px;top:11.5px;position:absolute;z-index:1000}.overlay-popout-office[_ngcontent-%COMP%]{width:100px;height:20px;right:0;bottom:0;position:absolute;z-index:1000}.overlay-full[_ngcontent-%COMP%]{width:100%;height:100%;right:0;top:0;position:absolute;z-index:1000}iframe[_ngcontent-%COMP%]{width:100%;height:100%}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxDocViewerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-doc-viewer',\n      styles: [`\n      :host {\n        display: block;\n      }\n      .container {\n        width: 100%;\n        height: 100%;\n        position: relative;\n      }\n      .overlay-popout-google {\n        width: 40px;\n        height: 40px;\n        right: 26px;\n        top: 11.5px;\n        position: absolute;\n        z-index: 1000;\n      }\n      .overlay-popout-office {\n        width: 100px;\n        height: 20px;\n        right: 0;\n        bottom: 0;\n        position: absolute;\n        z-index: 1000;\n      }\n      .overlay-full {\n        width: 100%;\n        height: 100%;\n        right: 0;\n        top: 0;\n        position: absolute;\n        z-index: 1000;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n      }\n    `],\n      template: \"<ng-container *ngIf=\\\"!externalViewer\\\">\\r\\n  <div *ngIf=\\\"configuredViewer !== 'pdf'\\\" [innerHtml]=\\\"docHtml\\\"></div>\\r\\n  <object\\r\\n    *ngIf=\\\"fullUrl && configuredViewer === 'pdf'\\\"\\r\\n    [data]=\\\"fullUrl\\\"\\r\\n    type=\\\"application/pdf\\\"\\r\\n    width=\\\"100%\\\"\\r\\n    height=\\\"100%\\\"\\r\\n  >\\r\\n    <p>\\r\\n      Your browser does not support PDFs.\\r\\n      <a [href]=\\\"fullUrl\\\">Download the PDF</a>.\\r\\n    </p>\\r\\n  </object>\\r\\n</ng-container>\\r\\n<ng-container *ngIf=\\\"externalViewer\\\">\\r\\n  <iframe\\r\\n    (load)=\\\"iframeLoaded()\\\"\\r\\n    *ngIf=\\\"fullUrl && disableContent === 'none'\\\"\\r\\n    #iframe\\r\\n    id=\\\"iframe-doc-viewer\\\"\\r\\n    frameBorder=\\\"0\\\"\\r\\n    [src]=\\\"fullUrl\\\"\\r\\n  ></iframe>\\r\\n  <div class=\\\"container\\\" *ngIf=\\\"disableContent !== 'none'\\\">\\r\\n    <div\\r\\n      [class.overlay-full]=\\\"disableContent === 'all'\\\"\\r\\n      [class.overlay-popout-google]=\\\"\\r\\n        configuredViewer === 'google' &&\\r\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\r\\n      \\\"\\r\\n      [class.overlay-popout-office]=\\\"\\r\\n        configuredViewer === 'office' &&\\r\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\r\\n      \\\"\\r\\n      [style.background-color]=\\\"\\r\\n        disableContent === 'popout-hide' ? '#fff' : 'transparent'\\r\\n      \\\"\\r\\n    ></div>\\r\\n    <iframe\\r\\n      (load)=\\\"iframeLoaded()\\\"\\r\\n      *ngIf=\\\"fullUrl\\\"\\r\\n      #iframe\\r\\n      id=\\\"iframe\\\"\\r\\n      frameBorder=\\\"0\\\"\\r\\n      [src]=\\\"fullUrl\\\"\\r\\n    ></iframe>\\r\\n  </div>\\r\\n</ng-container>\\r\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    loaded: [{\n      type: Output\n    }],\n    url: [{\n      type: Input\n    }],\n    queryParams: [{\n      type: Input\n    }],\n    viewerUrl: [{\n      type: Input\n    }],\n    googleCheckInterval: [{\n      type: Input\n    }],\n    googleMaxChecks: [{\n      type: Input\n    }],\n    disableContent: [{\n      type: Input\n    }],\n    googleCheckContentLoaded: [{\n      type: Input\n    }],\n    viewer: [{\n      type: Input\n    }],\n    overrideLocalhost: [{\n      type: Input\n    }],\n    iframes: [{\n      type: ViewChildren,\n      args: ['iframe']\n    }]\n  });\n})();\n\nclass NgxDocViewerModule {}\n\nNgxDocViewerModule.ɵfac = function NgxDocViewerModule_Factory(t) {\n  return new (t || NgxDocViewerModule)();\n};\n\nNgxDocViewerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxDocViewerModule\n});\nNgxDocViewerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxDocViewerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxDocViewerComponent],\n      exports: [NgxDocViewerComponent]\n    }]\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxDocViewerComponent, NgxDocViewerModule }; //# sourceMappingURL=ngx-doc-viewer.mjs.map","map":null,"metadata":{},"sourceType":"module"}